// 배열은 여러 개의 변수를 한 번에 선언해 사용할 수 있는 자료형이다.
// 배열에 삽입되는 데이터를 '요소'라 한다.
// 요소로 등록되는 데이터는 모든 타입이 가능하나 대부분 원시 리터럴(숫자, 문자) 타입을 사용한다.

// 1. 배열 생성 array() : 생성자
// const number = [1, 2, 3, 4, 5]; // 배열은 []를 사용하여 묶는다.
//배열 이름은 number이고, 1, 2, 3, 4, 5가 요소로 등록되어 있다.
// console.log(number);

// 2. 배열 생성 : 리터럴

// 3. 요소의 접근
// 배열에 등록된 요소는 각각 고유 인덱스를 가진다. 인덱스는 가장 처음 데이터가 0이되고, 이후 1, 2, 3... 순으로 지정된다.
// 배열 요소에 접근할 때는 지정된 인덱스를 [] 안에 작성한다.
// console.log(number[1]);

// 4. 배열 요소의 개수
// 배열 요소의 개수는 length를 사용하여 확인할 수 있다.
// 주의할 점은 개수가 인덱스보다 1 크다는 점이다. 이는 length는 총 개수이고, 인덱스는 0부터 시작하기 때문이다.
// console.log(number.length);

// 5.1 배열 요소의 추가 : push
// push() 메서드는 배열의 뒷부분에 요소를 추가한다.
// 이 경우 원본 데이터가 변경된다.

// 5.2 배열 요소의 추가 : 인덱스 사용
// 배열 요소의 인덱스에 접근하여 배열 요소를 변경할 수 있다.
// 기존에 존재했던 데이터의 인덱스 번호보다 몇 단계 이후의 인덱스에 데이터를 추가하면 건너뛴 단계의 인덱스는 비어있게 된다.(empty)

// 기존에 존재했던 데이터 중간의 인덱스에 접근하여 데이터를 삽입하면 기존 인덱스의 요소는 없어진다.

// 5.3 배열 요소의 추가 : unshift()
// unshift는 전체 배열을 한 단위 인덱스만큼 뒤로 이동시키기 때문에 리소스 측면에서 비효율적이고, 배열의 데이터를 앞이나 중간에 추가하는 경우는 드물다. 따라서 잘 사용되지 않는다.

// 6.1 배열 요소의 삭제 : splice()
// splice() 메서드는 배열의 특정 요소를 제거할 때 사용한다. '잇는다'는 뜻은 삭제된 인덱스 앞뒤를 이어준다는 의미로 볼 수 있다.
// signiture : array.splice(index, length of remove data)

// 6.2 배열 요소의 삭제 : 요소를 선택하여 삭제 indexOf() => splice()
// 삭제할 요소의 값을 알고 있을 경우 해당 값의 인덱스를 확인하고, 이를 삭제할 수 있다.;

// 7. 전개 연산자(spread operator)
// - 전개 연산자는 배열에 할당된 요소를 개수와 상관없이 함수 파라미터로 전달할 수 있도록 하는 방식이다

// console.log('---------------');
// // 반복문을 사용하여 배열 요소 각각에 접근할 수 있다.
// // i는 변수이므로 이름은 임의로 작성 가능하나, 관례적으로 i를 주로 사용한다.
// // let i = 0; : 초기 변수값
// // i < 5; : 조건식이며, true일 경우 코드 블럭 실행. false일 경우 코드 블럭은 종료된다.
// // i++ : 증감식 = 코드 블럭이 실행되면 i 변수를 하나 증가시킨다.
// for (let i = 0; i < number.length; i++) {
//   console.log(number[i]);
// }

// let num = 1;
// num = num + 1;
// num += 1;
// num++;

// console.log(num);

// number.forEach((num) => {
// console.log(num);
// });

// 1. 4개의 버튼 요소 변수에 저장
const btns = document.querySelectorAll('.tabs button');
console.log(btns); // 콘솔 창으로 확인한다. (확인 후 주석 처리하고, 앱 완성 후 삭제)

// 2. 사진 배열 작성
const imgs = ['Blur.jpeg', 'Greenday.webp', 'hipnosis,jpg', 'OASIS.webs'];

// 8. 사진을 감싸는 요소 변수(imgWrapper)에 저장

// 3. 반복문으로 버튼 개별 요소 접근
btns.forEach((btn) => {
  //============= 버튼 활성화 코드 시작 ===============//

  // 4. 개별 버튼을 클릭 했을 때 이벤트 추가
  btn.addEventListener('click', function () {
    // 5. 클릭 했을 때 전체 버튼 요소에 active 클래스 제거
    // btns.forEach((btn) => {
    //   btns.classList.remove('active'); //모든 버튼 요소에 active 클래스 제거
    // });

    btns.forEach((btn) => btn.classList.remove('active')); // 5버 코드 간소화

    // 6. 클릭한 버튼 요소에 active 클래스 추가
    this.classList.add('active');

    //============= 버튼 활성화 코드 끝 ===============//

    // 7. 클릭한 버튼의 인덱스 번호를 변수(idx)에 저장

    // 9. 사진 문자열 백틱을 사용하여 저장 : <img src="${imgs[idx]}" alt="">

    // 10. imgWrapper 변수에 9번에 작성한 변수를 할당
  });
});
